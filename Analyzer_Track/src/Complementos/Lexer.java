/* The following code was generated by JFlex 1.4.3 on 2/06/23, 12:49 */

/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package Complementos;
import java_cup.runtime.*;
import java.util.LinkedList;

/*------------  2da Area: Opciones y Declaraciones ---------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/06/23, 12:49 from the specification file
 * <tt>C:/Users/ojacinto/Desktop/Compiladores/Analyzer_Track/src/Analizadores/Lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\35\6\0\1\36"+
    "\5\0\1\34\23\0\1\11\1\2\1\24\1\4\1\3\1\30\1\22"+
    "\1\20\1\5\1\31\1\15\1\6\1\16\1\14\1\10\1\25\1\32"+
    "\1\7\1\23\1\12\1\21\1\27\1\26\1\17\1\13\1\33\6\0"+
    "\1\11\1\2\1\24\1\4\1\3\1\30\1\22\1\20\1\5\1\31"+
    "\1\15\1\6\1\16\1\14\1\10\1\25\1\32\1\7\1\23\1\12"+
    "\1\21\1\27\1\26\1\17\1\13\1\33\u1f9e\0\1\37\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\3\3\1\1\4\20\1"+
    "\1\5\5\0\1\6\16\0\1\5\4\0\1\3\1\6"+
    "\1\0\1\7\1\0\1\10\13\0\1\11\2\0\1\6"+
    "\4\0\1\6\5\0\1\6\1\4\1\12\1\0\1\6"+
    "\10\0\1\6\5\0\1\11\2\0\1\13\11\0\1\14"+
    "\1\0\1\3\7\0\1\6\4\0\1\5\5\0\1\15"+
    "\31\0\1\16\23\0\1\17\5\0\1\20\5\0\1\5"+
    "\1\21\15\0\1\22\4\0\1\6\1\5\3\0\1\17"+
    "\1\5\2\0\1\20\66\0\1\23\13\0\1\21\26\0"+
    "\1\5\7\0\1\24\20\0\1\20\3\0\1\24\3\0"+
    "\1\25\4\0\1\26\2\0\1\24\12\0\1\20\26\0"+
    "\1\27\4\0\1\30\1\0\1\16\5\0\1\31\1\13"+
    "\21\0\1\17\3\0\1\14\1\0\1\32\1\5\1\0"+
    "\1\14\3\0\1\22\2\0\1\17\15\0\1\5\6\0"+
    "\1\5\1\17\31\0\1\3\3\0\1\17\35\0\1\17"+
    "\7\0\1\6\23\0\1\5\3\0\1\5\1\0\1\5"+
    "\2\0\1\33\2\0\1\6\15\0\1\6\3\0\1\34"+
    "\5\0\1\5\13\0\1\5\55\0\1\34\30\0\1\17"+
    "\1\0\1\20\21\0\1\15\5\0\1\6\65\0\1\16"+
    "\1\0\1\35\1\0\1\35\1\6\3\0\1\6\5\0"+
    "\1\5\13\0\1\17\1\0\1\5\11\0\1\5\3\0"+
    "\1\22\1\5\1\0\1\24\5\0\1\17\1\0\1\5"+
    "\11\0\1\17\12\0\1\20\21\0\1\17\7\0\1\30"+
    "\2\0\1\33\1\0\1\33\26\0\1\5\45\0\1\24"+
    "\33\0\1\6\3\0\1\34\1\35\6\0\1\30\11\0"+
    "\1\34\5\0\1\6\6\0\1\21\4\0\1\20\5\0"+
    "\1\20\10\0\1\20\33\0\1\6\7\0\1\36\47\0"+
    "\1\20\23\0\1\5\3\0\1\37\2\0\1\40\1\41"+
    "\4\0\1\41\10\0\1\34\5\0\1\26\6\0\1\42"+
    "\1\36\6\0\1\37\1\43\4\0\1\44\37\0\1\45"+
    "\32\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\40\0\100\0\140\0\200\0\240\0\300"+
    "\0\340\0\u0100\0\u0120\0\u0140\0\u0160\0\u0180\0\u01a0\0\u01c0"+
    "\0\u01e0\0\u0200\0\u0220\0\u0240\0\u0260\0\u0280\0\u02a0\0\u02c0"+
    "\0\u02e0\0\u0300\0\u0320\0\u0340\0\u0360\0\u0380\0\u03a0\0\u03c0"+
    "\0\u03e0\0\u0400\0\u0420\0\u0440\0\u0460\0\u0480\0\u04a0\0\u04c0"+
    "\0\u04e0\0\u0500\0\u0520\0\u0540\0\u0560\0\u0580\0\u05a0\0\u05c0"+
    "\0\u05e0\0\u0600\0\u0620\0\u0640\0\u0660\0\u0680\0\u06a0\0\u06c0"+
    "\0\u06e0\0\u0700\0\40\0\u0720\0\u0740\0\u0760\0\u0780\0\u07a0"+
    "\0\u07c0\0\u07e0\0\u0800\0\u0820\0\u0840\0\u0860\0\u0880\0\u08a0"+
    "\0\u08c0\0\u08e0\0\u0900\0\u0920\0\u0940\0\u0960\0\u0980\0\u09a0"+
    "\0\u09c0\0\u09e0\0\u0a00\0\u0a20\0\u0a40\0\u0a60\0\u0a80\0\u0aa0"+
    "\0\u0ac0\0\u0ae0\0\u0b00\0\u0b20\0\u0b40\0\u0b60\0\u0b80\0\u0ba0"+
    "\0\u0bc0\0\u0be0\0\u0c00\0\u0c20\0\u0c40\0\u0c60\0\u0c80\0\40"+
    "\0\u0ca0\0\u0cc0\0\u0ce0\0\u0d00\0\u0d20\0\u0d40\0\u0d60\0\u0d80"+
    "\0\u0da0\0\u0dc0\0\u0de0\0\u0e00\0\40\0\u0e20\0\u0e40\0\u0e60"+
    "\0\u0e80\0\u0ea0\0\u0ec0\0\u0ee0\0\u0f00\0\u0f20\0\u0f40\0\u0f60"+
    "\0\u0f80\0\u0fa0\0\u0fc0\0\u0fe0\0\u1000\0\u1020\0\u1040\0\u1060"+
    "\0\u1080\0\u10a0\0\u10c0\0\u10e0\0\u1100\0\u1120\0\u1140\0\u1160"+
    "\0\u1180\0\u11a0\0\u11c0\0\u11e0\0\u1200\0\u1220\0\u1240\0\u1260"+
    "\0\u1280\0\u12a0\0\u12c0\0\u12e0\0\u1300\0\u1320\0\u1340\0\u1360"+
    "\0\u1380\0\u13a0\0\u13c0\0\u13e0\0\u1400\0\u1420\0\u1440\0\u1460"+
    "\0\u1480\0\u14a0\0\u14c0\0\u14e0\0\u1500\0\u1520\0\u1540\0\u1560"+
    "\0\u1580\0\u15a0\0\u15c0\0\u15e0\0\u1600\0\u1620\0\u1640\0\40"+
    "\0\u1660\0\u1680\0\u16a0\0\u16c0\0\u16e0\0\u1700\0\u1720\0\u1740"+
    "\0\u1760\0\u1780\0\u17a0\0\u17c0\0\40\0\u17e0\0\u1800\0\u1820"+
    "\0\u1840\0\u1860\0\u1880\0\u18a0\0\u18c0\0\u18e0\0\u1900\0\u1920"+
    "\0\u1940\0\u1960\0\40\0\u1980\0\u19a0\0\u19c0\0\u19e0\0\u1a00"+
    "\0\40\0\u1a20\0\u1a40\0\u1a60\0\u1a80\0\u1aa0\0\u1ac0\0\u1ae0"+
    "\0\40\0\u1b00\0\u1b20\0\u1b40\0\u1b60\0\u1b80\0\u1ba0\0\u1bc0"+
    "\0\u1be0\0\u1c00\0\u1c20\0\u1c40\0\u1c60\0\u1c80\0\u1ca0\0\u1cc0"+
    "\0\u1ce0\0\u1d00\0\u1d20\0\u1d40\0\u1d60\0\u1d80\0\u1da0\0\u1dc0"+
    "\0\u1de0\0\u1e00\0\u1e20\0\u1e40\0\u1e60\0\u1e80\0\u1ea0\0\u1ec0"+
    "\0\u1ee0\0\u1f00\0\u1f20\0\u1f40\0\u1f60\0\u1f80\0\u1fa0\0\u1fc0"+
    "\0\u1fe0\0\u2000\0\u2020\0\u2040\0\u2060\0\u2080\0\u20a0\0\u20c0"+
    "\0\u20e0\0\u2100\0\u2120\0\u2140\0\u2160\0\u2180\0\u21a0\0\40"+
    "\0\u21c0\0\u21e0\0\u2200\0\u2220\0\u2240\0\u2260\0\u2280\0\u22a0"+
    "\0\u22c0\0\u22e0\0\u2300\0\u1b20\0\u2320\0\u2340\0\u2360\0\u2380"+
    "\0\u23a0\0\u23c0\0\u23e0\0\u2400\0\u2420\0\u2440\0\u2460\0\u2480"+
    "\0\u24a0\0\u24c0\0\u24e0\0\u2500\0\u2520\0\u2540\0\u2560\0\u2580"+
    "\0\u25a0\0\u25c0\0\u25e0\0\u2600\0\u2620\0\u2640\0\u2660\0\u2680"+
    "\0\u26a0\0\u26c0\0\40\0\u26e0\0\u2700\0\u2720\0\u2740\0\u2760"+
    "\0\u2780\0\u27a0\0\u27c0\0\u27e0\0\u2800\0\u2820\0\u2840\0\u2860"+
    "\0\u2880\0\u28a0\0\u28c0\0\u28e0\0\u2900\0\u2920\0\u2940\0\u2960"+
    "\0\u2980\0\u29a0\0\u29c0\0\40\0\u29e0\0\u2a00\0\u2a20\0\u2a40"+
    "\0\40\0\u2a60\0\u2a80\0\u2aa0\0\u2ac0\0\u2ae0\0\u2b00\0\u2b20"+
    "\0\u2b40\0\u2b60\0\u2b80\0\u2ba0\0\u2bc0\0\u2be0\0\u2480\0\u2c00"+
    "\0\u2c20\0\u2c40\0\u2c60\0\u2c80\0\u2ca0\0\u2cc0\0\u2ce0\0\u2d00"+
    "\0\u2d20\0\u2d40\0\u2d60\0\u2d80\0\u2da0\0\u2dc0\0\u2de0\0\u2e00"+
    "\0\u2e20\0\u2e40\0\u2e60\0\u2e80\0\u2ea0\0\u2ec0\0\u2ee0\0\u2f00"+
    "\0\u2f20\0\u2f40\0\40\0\u2f60\0\u2f80\0\u2fa0\0\u2fc0\0\u2fe0"+
    "\0\u3000\0\u3020\0\40\0\u3040\0\u3060\0\u3080\0\u30a0\0\u30c0"+
    "\0\u30e0\0\u3100\0\u3120\0\u3140\0\u3160\0\u3180\0\u31a0\0\u31c0"+
    "\0\u31e0\0\u3200\0\u3220\0\u3240\0\u3260\0\u3280\0\u32a0\0\u32c0"+
    "\0\u32e0\0\u3300\0\u3320\0\40\0\u2520\0\u3340\0\u3360\0\u3380"+
    "\0\u33a0\0\u33c0\0\u33e0\0\u3400\0\u3420\0\u0f20\0\u3440\0\u3460"+
    "\0\u3480\0\u34a0\0\u34c0\0\u34e0\0\u3500\0\u3520\0\u3540\0\u3560"+
    "\0\u3580\0\u35a0\0\u35c0\0\u35e0\0\u3600\0\u3620\0\u3640\0\u3660"+
    "\0\u3680\0\u36a0\0\u36c0\0\u1920\0\u36e0\0\u3700\0\u3720\0\u3740"+
    "\0\u3760\0\u3780\0\u37a0\0\u37c0\0\u37e0\0\u3800\0\u3820\0\u3840"+
    "\0\u3860\0\u3880\0\u38a0\0\u38c0\0\u38e0\0\u3900\0\u3920\0\u3940"+
    "\0\u3960\0\u3980\0\u39a0\0\u39c0\0\u39e0\0\u3a00\0\u3a20\0\u3a40"+
    "\0\u3a60\0\u3a80\0\u3aa0\0\u3ac0\0\u3ae0\0\u3b00\0\u3b20\0\u3b40"+
    "\0\u3b60\0\u3b80\0\u3ba0\0\u3bc0\0\u3be0\0\u3c00\0\u3c20\0\u3c40"+
    "\0\u3c60\0\u3c80\0\u3ca0\0\u3cc0\0\u3ce0\0\u3d00\0\u3d20\0\u3d40"+
    "\0\u3d60\0\u3d80\0\u3da0\0\u3dc0\0\u3de0\0\u3e00\0\u3e20\0\u2d00"+
    "\0\u3e40\0\u3e60\0\u3e80\0\u3ea0\0\u3ec0\0\u3ee0\0\u3f00\0\u3f20"+
    "\0\u3f40\0\u3f60\0\u3f80\0\u3fa0\0\u3fc0\0\u3fe0\0\u4000\0\u4020"+
    "\0\u4040\0\u4060\0\u4080\0\u40a0\0\u40c0\0\u40e0\0\u4100\0\u4120"+
    "\0\u4140\0\u4160\0\u4180\0\u41a0\0\u41c0\0\u41e0\0\u4200\0\u4220"+
    "\0\u4240\0\u2600\0\u4260\0\u4280\0\u42a0\0\u42c0\0\u42e0\0\40"+
    "\0\u4300\0\u4320\0\u4340\0\u4360\0\u4380\0\u43a0\0\u43c0\0\u43e0"+
    "\0\u4400\0\u4420\0\u4440\0\u4460\0\u4480\0\u44a0\0\u44c0\0\u44e0"+
    "\0\u4500\0\u4520\0\u4540\0\u4560\0\u4580\0\u45a0\0\u45c0\0\u45e0"+
    "\0\u4600\0\u4620\0\u4640\0\u4660\0\u4680\0\u46a0\0\u46c0\0\u46e0"+
    "\0\u4700\0\u4720\0\u4740\0\u46a0\0\u4760\0\u25e0\0\u4780\0\u47a0"+
    "\0\u47c0\0\u47e0\0\u4800\0\u4820\0\u4840\0\u4860\0\u4880\0\u48a0"+
    "\0\u48c0\0\u48e0\0\u4900\0\u4920\0\u4940\0\u4960\0\u4980\0\u49a0"+
    "\0\u49c0\0\u49e0\0\u4a00\0\u4a20\0\u4a40\0\u4a60\0\u4a80\0\u4aa0"+
    "\0\u4ac0\0\u4ae0\0\u4b00\0\u4b20\0\u4b40\0\u4b60\0\u4b80\0\u4ba0"+
    "\0\u4bc0\0\u4be0\0\u4c00\0\u4c20\0\u4c40\0\u4c60\0\u4c80\0\u4ca0"+
    "\0\u4cc0\0\40\0\u4ce0\0\u4d00\0\u4d20\0\u4d40\0\u4d60\0\u4d80"+
    "\0\u4da0\0\u4dc0\0\u4de0\0\u4e00\0\u4e20\0\u4e40\0\u4e60\0\u4e80"+
    "\0\u4ea0\0\u4ec0\0\u4ee0\0\u4f00\0\u4f20\0\u4f40\0\u4f60\0\u4f80"+
    "\0\u4fa0\0\u4fc0\0\u4fe0\0\u5000\0\u5020\0\u5040\0\u5060\0\u5080"+
    "\0\u50a0\0\u50c0\0\u50e0\0\u5100\0\u5120\0\u1aa0\0\u5140\0\u5160"+
    "\0\u5180\0\u51a0\0\u51c0\0\u51e0\0\u5200\0\u5220\0\40\0\u5240"+
    "\0\u5260\0\u5280\0\u52a0\0\u52c0\0\u52e0\0\u5300\0\u5320\0\u5340"+
    "\0\u5360\0\u5380\0\u53a0\0\u53c0\0\u53e0\0\u5400\0\u5420\0\u5440"+
    "\0\u5460\0\u5480\0\u54a0\0\u54c0\0\u54e0\0\u5500\0\u5520\0\u5540"+
    "\0\u5560\0\u5580\0\u55a0\0\u55c0\0\u55e0\0\u5600\0\u5620\0\u5640"+
    "\0\u5660\0\u5680\0\u56a0\0\u56c0\0\u56e0\0\u5700\0\u5720\0\u5740"+
    "\0\u5760\0\u5780\0\u57a0\0\u57c0\0\u57e0\0\u5800\0\u5820\0\u5840"+
    "\0\u5860\0\u5880\0\u58a0\0\u58c0\0\u58e0\0\u5900\0\u5920\0\u5940"+
    "\0\u5960\0\u5980\0\u59a0\0\u59c0\0\u59e0\0\u5a00\0\u5a20\0\u22a0"+
    "\0\u5a40\0\u5a60\0\u5a80\0\u1f60\0\u5aa0\0\u5ac0\0\u5ae0\0\u5b00"+
    "\0\u5b20\0\u0f60\0\u5b40\0\u5b60\0\u5b80\0\u5ba0\0\u5bc0\0\u5be0"+
    "\0\u5c00\0\u5c20\0\u5c40\0\u5c60\0\u5c80\0\u39c0\0\u5ca0\0\u2ae0"+
    "\0\u5cc0\0\u5ce0\0\u5d00\0\u5d20\0\u5d40\0\u5d60\0\u5d80\0\u5da0"+
    "\0\u5dc0\0\u3b00\0\u5de0\0\u5e00\0\u5e20\0\u5e40\0\u5e60\0\u5e80"+
    "\0\u5ea0\0\u5ec0\0\u5ee0\0\u5f00\0\u5f20\0\u5f40\0\u5f60\0\u5f80"+
    "\0\u5fa0\0\u5fc0\0\u5fe0\0\u6000\0\u6020\0\u6040\0\u6060\0\u6080"+
    "\0\u60a0\0\u60c0\0\u60e0\0\u6100\0\u6120\0\u6140\0\u6160\0\u6180"+
    "\0\u61a0\0\u61c0\0\u61e0\0\u6200\0\u6220\0\u4f60\0\u6240\0\u6260"+
    "\0\u6280\0\u62a0\0\u62c0\0\u62e0\0\u6300\0\u6320\0\u6340\0\u6360"+
    "\0\u6380\0\u63a0\0\u63c0\0\u63e0\0\u6400\0\u6420\0\u6440\0\u18c0"+
    "\0\u6460\0\u6480\0\u64a0\0\u64c0\0\u64e0\0\u3300\0\u6500\0\u6520"+
    "\0\u6540\0\u6560\0\40\0\u6580\0\u6520\0\u65a0\0\u65c0\0\u65e0"+
    "\0\u6600\0\u6620\0\u6640\0\u2960\0\u6660\0\u6680\0\u66a0\0\u66c0"+
    "\0\u66e0\0\u6700\0\u6720\0\u6740\0\u6760\0\u6780\0\u67a0\0\u67c0"+
    "\0\u67e0\0\u6800\0\u6820\0\u3b80\0\u6840\0\u6860\0\u6880\0\u68a0"+
    "\0\u68c0\0\u68e0\0\u6900\0\u6920\0\u6940\0\u6960\0\u6980\0\u69a0"+
    "\0\u69c0\0\u69e0\0\u6a00\0\u6a20\0\u6a40\0\u6a60\0\u6a80\0\u6aa0"+
    "\0\u6ac0\0\u6ae0\0\u6b00\0\u6b20\0\u6b40\0\u6b60\0\u6b80\0\u6ba0"+
    "\0\u6bc0\0\u6be0\0\u6c00\0\u6c20\0\u6c40\0\u6c60\0\u6c80\0\u6ca0"+
    "\0\u6cc0\0\u6ce0\0\u6d00\0\u6d20\0\u6d40\0\u6d60\0\u6d80\0\u6da0"+
    "\0\u6dc0\0\u6de0\0\u6e00\0\u6e20\0\u6e40\0\u6e60\0\u6e80\0\u6ea0"+
    "\0\u6ec0\0\u6ee0\0\u6f00\0\u6f20\0\u6f40\0\u6f60\0\u6f80\0\u6fa0"+
    "\0\u6fc0\0\u6fe0\0\u7000\0\u7020\0\u7040\0\u7060\0\u7080\0\u70a0"+
    "\0\u70c0\0\u70e0\0\40\0\u7100\0\u7120\0\u7140\0\u7160\0\u7180"+
    "\0\u71a0\0\u5b00\0\u71c0\0\u71e0\0\u7200\0\u7220\0\u7240\0\u7260"+
    "\0\u7280\0\u72a0\0\u72c0\0\u72e0\0\u7300\0\u7320\0\u7340\0\u7360"+
    "\0\u7380\0\u73a0\0\u73c0\0\u73e0\0\u7400\0\u7420\0\u7440\0\u7460"+
    "\0\u4fe0\0\u7480\0\u74a0\0\u74c0\0\u74e0\0\u1f60\0\u7500\0\u7520"+
    "\0\u7540\0\u7560\0\u7580\0\u72a0\0\u75a0\0\u75c0\0\u75e0\0\u7600"+
    "\0\u7620\0\u7640\0\u7660\0\u7680\0\u1920\0\u76a0\0\u76c0\0\u76e0"+
    "\0\u7700\0\u7720\0\u7740\0\u7760\0\u7780\0\u77a0\0\u77c0\0\u77e0"+
    "\0\u7800\0\u7820\0\u7840\0\u7860\0\u7880\0\u78a0\0\u78c0\0\u78e0"+
    "\0\u7900\0\u7920\0\u7940\0\u7960\0\u7980\0\u79a0\0\u79c0\0\u79e0"+
    "\0\u7a00\0\u7a20\0\u7a40\0\u7a60\0\u7a80\0\u7aa0\0\u7ac0\0\u7ae0"+
    "\0\40\0\u7b00\0\u7b20\0\u7b40\0\u7b60\0\u7b80\0\u7ba0\0\u7a00"+
    "\0\u7bc0\0\u7be0\0\u7c00\0\u7c20\0\u7c40\0\u7c60\0\u7c80\0\u7ca0"+
    "\0\u7cc0\0\u7ce0\0\u7d00\0\u7d20\0\u7d40\0\u7d60\0\u7d80\0\u7da0"+
    "\0\u7dc0\0\u7de0\0\u7e00\0\u7e20\0\u7e40\0\u7e60\0\u7e80\0\u7ea0"+
    "\0\u7ec0\0\u7ee0\0\u7f00\0\u7f20\0\u7f40\0\u7f60\0\u7f80\0\u7fa0"+
    "\0\u7fc0\0\u7fe0\0\u8000\0\u8020\0\u8040\0\u8060\0\u8080\0\u80a0"+
    "\0\u80c0\0\u80e0\0\u8100\0\u8120\0\u8140\0\u8160\0\u8180\0\u81a0"+
    "\0\u81c0\0\u81e0\0\u8200\0\u8220\0\u8240\0\u8260\0\u8280\0\u82a0"+
    "\0\u7a00\0\u82c0\0\u82e0\0\40\0\40\0\u8300\0\u8320\0\u8340"+
    "\0\u8360\0\u7a00\0\u8380\0\u83a0\0\u83c0\0\u83e0\0\u8400\0\u8420"+
    "\0\u8440\0\u8460\0\u7a00\0\u8480\0\u84a0\0\u84c0\0\u84e0\0\u8500"+
    "\0\u7d00\0\u8520\0\u8540\0\u8560\0\u8580\0\u85a0\0\u85c0\0\40"+
    "\0\u85e0\0\u8600\0\u8620\0\u8640\0\u8660\0\u8680\0\u8240\0\40"+
    "\0\40\0\u86a0\0\u86c0\0\u86e0\0\u8700\0\40\0\u8720\0\u8740"+
    "\0\u8760\0\u8780\0\u87a0\0\u87c0\0\u87e0\0\u8800\0\u8820\0\u8840"+
    "\0\u8860\0\u8880\0\u88a0\0\u88c0\0\u88e0\0\u8900\0\u8920\0\u8940"+
    "\0\u8960\0\u8980\0\u89a0\0\u89c0\0\u89e0\0\u8a00\0\u8a20\0\u8a40"+
    "\0\u8a60\0\u8a80\0\u8aa0\0\u8ac0\0\u8ae0\0\40\0\u8b00\0\u8b20"+
    "\0\u8b40\0\u8b60\0\u8b80\0\u8ba0\0\u8bc0\0\u8be0\0\u8c00\0\u8c20"+
    "\0\u8c40\0\u8c60\0\u8c80\0\u8ca0\0\u8cc0\0\u8ce0\0\u8d00\0\u8d20"+
    "\0\u8d40\0\u8d60\0\u8d80\0\u8da0\0\u8dc0\0\u8de0\0\u8e00\0\u8e20";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\2"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\2\1\3\2\2\43\0\1\34"+
    "\1\0\1\35\1\36\1\37\1\40\1\41\1\0\1\42"+
    "\5\0\1\43\23\0\1\44\1\45\2\0\1\46\1\0"+
    "\1\47\1\50\1\0\1\51\1\52\2\0\1\53\1\54"+
    "\3\0\1\55\13\0\1\56\1\0\1\57\1\0\1\60"+
    "\1\61\1\62\7\0\1\63\22\0\1\64\2\0\1\65"+
    "\2\0\1\66\1\0\1\67\1\0\1\70\4\0\1\71"+
    "\1\72\3\0\1\73\6\0\1\74\3\0\1\75\1\0"+
    "\1\76\2\0\1\77\1\100\31\0\1\101\1\0\1\102"+
    "\2\0\1\103\1\104\7\0\1\105\20\0\1\106\4\0"+
    "\1\107\1\110\1\0\1\111\1\0\1\112\4\0\1\113"+
    "\2\0\1\114\1\115\1\0\1\116\1\117\11\0\1\120"+
    "\1\0\1\121\1\122\1\123\1\124\2\0\1\125\1\0"+
    "\1\126\1\0\1\127\3\0\1\130\1\131\1\132\1\133"+
    "\1\134\1\135\1\136\12\0\1\137\1\0\1\140\1\0"+
    "\1\141\1\142\1\143\6\0\1\144\1\145\21\0\1\146"+
    "\4\0\1\147\1\150\31\0\1\151\1\0\1\152\2\0"+
    "\1\153\1\154\7\0\1\155\21\0\1\156\1\0\1\157"+
    "\6\0\1\160\26\0\1\161\1\0\1\162\2\0\1\163"+
    "\1\164\1\0\1\165\5\0\1\166\21\0\1\167\1\0"+
    "\1\170\2\0\1\171\1\172\7\0\1\173\32\0\1\174"+
    "\3\0\1\175\2\0\1\176\1\0\1\177\15\0\1\200"+
    "\1\0\1\201\1\202\1\203\1\204\1\205\7\0\1\206"+
    "\21\0\1\207\1\0\1\210\1\211\1\0\1\212\1\213"+
    "\1\214\1\215\1\216\1\217\1\220\1\0\1\221\1\222"+
    "\2\0\1\223\1\224\1\225\3\0\1\226\10\0\1\227"+
    "\1\0\1\230\1\231\1\232\1\233\1\234\6\0\1\235"+
    "\1\200\21\0\1\236\2\0\1\237\1\240\1\241\1\242"+
    "\7\0\1\243\21\0\1\244\1\0\1\245\1\0\1\246"+
    "\1\247\1\250\6\0\1\251\24\0\1\252\2\0\1\253"+
    "\1\254\31\0\1\255\1\0\1\256\1\257\1\260\1\261"+
    "\1\262\7\0\1\263\26\0\1\264\10\0\1\265\37\0"+
    "\1\266\21\0\1\267\1\270\1\0\1\271\3\0\1\272"+
    "\1\273\1\274\3\0\1\275\1\0\1\276\1\277\1\300"+
    "\3\0\1\301\15\0\1\302\1\303\2\0\1\304\7\0"+
    "\1\305\20\0\1\306\4\0\1\307\1\310\7\0\1\311"+
    "\21\0\1\312\1\0\1\313\2\0\1\314\33\0\1\315"+
    "\1\316\2\0\1\317\1\320\1\321\1\270\1\47\2\0"+
    "\1\270\1\0\1\322\20\0\1\315\1\0\1\323\1\0"+
    "\1\324\3\0\1\325\1\0\1\317\7\0\1\317\50\0"+
    "\1\326\7\0\1\327\4\0\1\330\1\331\7\0\1\332"+
    "\26\0\1\333\30\0\1\334\43\0\1\335\2\0\1\336"+
    "\11\0\1\337\16\0\1\270\37\0\1\340\1\341\3\0"+
    "\1\342\1\0\1\343\7\0\1\344\1\0\1\345\4\0"+
    "\1\346\33\0\1\347\23\0\1\350\1\351\11\0\1\352"+
    "\1\353\34\0\1\270\27\0\1\354\30\0\1\355\4\0"+
    "\1\356\35\0\1\357\3\0\1\360\10\0\1\361\1\362"+
    "\2\0\1\363\1\364\13\0\1\331\2\0\1\365\13\0"+
    "\1\366\1\367\2\0\1\370\13\0\1\306\1\0\1\371"+
    "\2\0\1\372\1\373\1\0\1\305\5\0\1\374\24\0"+
    "\1\375\1\0\1\122\3\0\1\376\7\0\1\377\1\0"+
    "\1\u0100\20\0\1\u0101\3\0\1\270\1\u0102\1\0\1\u0103"+
    "\7\0\1\u0104\14\0\1\u0105\3\0\1\u0106\33\0\1\u0107"+
    "\44\0\1\u0108\40\0\1\u0109\11\0\1\165\11\0\1\u010a"+
    "\1\u010b\1\u010c\4\0\1\u010d\5\0\1\u010e\10\0\1\u010f"+
    "\1\u0110\2\0\1\u0111\1\u0112\1\0\1\u0113\2\0\1\u0114"+
    "\13\0\1\u0115\13\0\1\u0116\20\0\1\u0117\34\0\1\270"+
    "\7\0\1\305\42\0\1\u0118\25\0\1\331\4\0\1\u0119"+
    "\1\331\1\0\1\u011a\5\0\1\270\1\u011b\3\0\1\u011c"+
    "\1\200\12\0\1\270\6\0\1\u011d\1\0\1\47\1\176"+
    "\4\0\1\u011e\1\u011f\3\0\1\176\1\47\17\0\1\u0120"+
    "\3\0\1\u0121\4\0\1\u0122\1\0\1\u0123\2\0\1\u0124"+
    "\1\176\17\0\1\u0125\2\0\1\u0126\1\0\1\u0127\1\47"+
    "\3\0\1\u0128\1\0\1\u0129\2\0\1\270\4\0\1\u012a"+
    "\12\0\1\u012b\2\0\1\u012c\1\u012d\1\0\1\u012e\1\0"+
    "\1\u012f\3\0\1\u0130\1\u012e\1\u0131\1\u0132\2\0\1\u0133"+
    "\1\0\1\u0134\11\0\1\u0135\7\0\1\53\6\0\1\u0136"+
    "\3\0\1\u0137\14\0\1\376\4\0\1\303\7\0\1\u0138"+
    "\1\0\1\376\1\317\1\0\1\270\15\0\1\u0139\1\u0108"+
    "\4\0\1\u013a\1\0\1\u013b\7\0\1\47\21\0\1\47"+
    "\5\0\1\u013b\6\0\1\u013c\22\0\1\u013d\22\0\1\u013e"+
    "\12\0\1\343\15\0\1\u013f\12\0\1\u0140\27\0\1\u0141"+
    "\32\0\1\u0142\22\0\1\u0143\1\0\1\u0144\1\u0145\26\0"+
    "\1\u0146\11\0\1\165\2\0\1\u0147\11\0\1\u0148\16\0"+
    "\1\u0149\20\0\1\u014a\16\0\1\u0104\21\0\1\u014b\15\0"+
    "\1\u014c\44\0\1\u014d\17\0\1\u014e\4\0\1\u014f\12\0"+
    "\1\u0150\1\u0151\7\0\1\u0152\1\0\1\u0153\20\0\1\u0154"+
    "\3\0\1\u0155\5\0\1\u0156\10\0\1\u0157\17\0\1\270"+
    "\36\0\1\u0158\1\u0159\6\0\1\u015a\7\0\1\u015b\14\0"+
    "\1\u015c\3\0\1\u015d\1\u015e\1\0\1\270\11\0\1\u015f"+
    "\16\0\1\331\6\0\1\u0160\31\0\1\u0161\1\u0162\2\0"+
    "\1\u0163\2\0\1\u0164\1\u0165\5\0\1\u0166\1\u0167\24\0"+
    "\1\u0168\10\0\1\u0152\21\0\1\270\3\0\1\u0169\1\0"+
    "\1\u016a\40\0\1\u016b\2\0\1\341\5\0\1\u016c\11\0"+
    "\1\u016d\11\0\1\u016e\2\0\1\u016f\11\0\1\u0170\5\0"+
    "\1\u0113\15\0\1\u0171\14\0\1\u0172\42\0\1\u0173\17\0"+
    "\1\u0174\41\0\1\u0175\15\0\1\u0176\15\0\1\u0177\2\0"+
    "\1\u0178\11\0\1\u012e\17\0\1\341\2\0\1\u0179\1\176"+
    "\4\0\1\u012a\30\0\1\u017a\2\0\1\u017b\1\u017c\1\0"+
    "\1\341\5\0\1\u017d\22\0\1\u017e\1\0\1\u017f\1\0"+
    "\1\u0180\5\0\1\u0181\2\0\1\u0182\4\0\1\u0183\17\0"+
    "\1\u0184\6\0\1\u0136\1\176\2\0\1\322\1\0\1\u0185"+
    "\17\0\1\u0186\1\0\1\u0187\1\0\1\u0188\1\u0189\1\u018a"+
    "\35\0\1\u0104\41\0\1\122\1\u018b\10\0\1\u018c\35\0"+
    "\1\u018d\23\0\1\u018e\1\0\1\u018f\1\0\1\u0190\5\0"+
    "\1\u0191\7\0\1\u0192\32\0\1\u011e\1\0\1\311\22\0"+
    "\1\u0193\2\0\1\u0194\1\0\1\u0195\6\0\1\47\2\0"+
    "\1\u018b\6\0\1\u0196\14\0\1\u0130\3\0\1\176\37\0"+
    "\1\u0197\24\0\1\u0198\7\0\1\270\11\0\1\200\20\0"+
    "\1\u0199\14\0\1\u019a\1\u0120\16\0\1\306\4\0\1\u019b"+
    "\32\0\1\200\5\0\1\u019c\1\331\1\0\1\u019d\27\0"+
    "\1\u019e\1\0\1\u019f\5\0\1\u01a0\32\0\1\u01a1\1\u0108"+
    "\3\0\1\u01a2\4\0\1\u01a3\5\0\1\176\14\0\1\376"+
    "\1\u01a4\1\0\1\254\2\0\1\u01a5\1\0\1\u01a6\1\376"+
    "\6\0\1\u01a7\1\270\35\0\1\u01a8\1\337\21\0\1\u01a9"+
    "\1\u01aa\1\0\1\u01ab\1\0\1\u01ac\23\0\1\u010c\4\0"+
    "\1\u01ad\2\0\1\176\2\0\1\331\7\0\1\u01ae\1\u01af"+
    "\22\0\1\u01b0\1\u01b1\2\0\1\305\3\0\1\47\2\0"+
    "\1\u01b2\3\0\1\176\1\u01b3\15\0\1\331\1\122\1\u01b4"+
    "\1\u01b5\2\0\1\u01b6\1\0\1\u01b7\10\0\1\u01b8\1\0"+
    "\1\376\17\0\1\u01b9\4\0\1\u01ba\5\0\1\311\21\0"+
    "\1\u01bb\1\u0185\1\u01bc\3\0\1\u01bd\61\0\1\u01be\6\0"+
    "\1\341\57\0\1\u01bf\26\0\1\331\34\0\1\302\17\0"+
    "\1\u0136\21\0\1\u01c0\31\0\1\u01c1\4\0\1\u01c2\1\u01c3"+
    "\34\0\1\303\3\0\1\u01c4\1\0\1\376\12\0\1\u01c5"+
    "\15\0\1\u0104\1\0\1\u01c6\2\0\1\u01c7\3\0\1\u01c8"+
    "\4\0\1\270\3\0\1\376\13\0\1\u01c9\5\0\1\u01ca"+
    "\31\0\1\u01cb\2\0\1\u0177\2\0\1\u01cc\1\270\1\0"+
    "\1\u01cd\7\0\1\u01ce\2\0\1\u01cf\14\0\1\47\5\0"+
    "\1\331\1\0\1\u01d0\5\0\1\u0108\1\u01d1\7\0\1\47"+
    "\7\0\1\u01d2\4\0\1\u01d3\35\0\1\u01d4\5\0\1\270"+
    "\1\0\1\u01d5\2\0\1\u01d6\6\0\1\u01d7\4\0\1\u01d8"+
    "\6\0\1\305\1\u01d9\1\u01da\3\0\2\331\1\u01db\11\0"+
    "\1\331\1\176\13\0\1\u01dc\1\0\1\u01dd\1\0\1\u01de"+
    "\1\u01df\1\u01e0\7\0\1\u01e1\34\0\1\u01e2\31\0\1\u01e3"+
    "\34\0\1\u0108\37\0\1\u01e4\2\0\1\356\1\u01e5\31\0"+
    "\1\u01e6\4\0\1\u01e7\1\u01e8\7\0\1\200\25\0\1\u01e9"+
    "\4\0\1\u01ea\5\0\1\u01eb\1\0\1\337\1\u01ec\2\0"+
    "\1\u01ed\14\0\1\u01ee\12\0\1\u01ef\22\0\1\u01f0\1\0"+
    "\1\u01f1\1\0\1\u01f2\1\u01f3\1\u01f4\31\0\1\u01f5\1\0"+
    "\1\u01f6\3\0\1\u01f6\7\0\1\u01f6\37\0\1\u01f7\25\0"+
    "\1\u01f8\1\0\1\u0152\2\0\1\u01f9\32\0\1\u01fa\2\0"+
    "\1\315\30\0\1\u01fb\1\0\1\u01fc\2\0\1\u01fd\1\u01fe"+
    "\36\0\1\u01ff\1\u0200\1\0\1\341\32\0\1\u0201\1\u0202"+
    "\1\0\1\u0203\1\u0204\1\0\1\u0205\1\0\1\u0206\2\0"+
    "\1\u0207\1\0\1\200\1\0\1\315\1\270\1\343\16\0"+
    "\1\302\1\254\2\0\1\u0208\1\0\1\331\1\0\1\376"+
    "\2\0\1\u0209\1\0\1\u020a\1\0\1\u020b\15\0\1\u020c"+
    "\1\0\1\u020d\2\0\1\u020e\1\u020f\35\0\1\u0210\33\0"+
    "\1\u0211\5\0\1\u0212\7\0\1\u0213\21\0\1\u0214\1\0"+
    "\1\u0215\2\0\1\u0216\1\u0217\34\0\1\u0218\12\0\1\u0219"+
    "\1\0\1\u021a\21\0\1\u021b\1\0\1\u021c\3\0\1\331"+
    "\7\0\1\u021d\1\u0120\1\u0137\20\0\1\u0199\3\0\1\331"+
    "\1\0\1\u021e\6\0\1\u013c\21\0\1\u021f\1\u0220\1\376"+
    "\1\0\1\u0221\1\305\1\0\1\200\22\0\1\u0222\4\0"+
    "\1\311\5\0\1\u0223\1\0\1\u0224\6\0\1\u013c\4\0"+
    "\1\47\14\0\1\u0225\2\0\1\u0226\36\0\1\u0227\4\0"+
    "\1\u0228\1\u0136\1\u0149\2\0\1\u0229\4\0\1\u01ac\16\0"+
    "\1\u012e\1\u0120\1\270\2\0\1\u0182\1\0\1\u012e\1\376"+
    "\5\0\1\u022a\17\0\1\u022b\1\0\1\u022c\2\0\1\u022d"+
    "\1\u022e\34\0\1\u022f\2\0\1\u0230\11\0\1\u0231\42\0"+
    "\1\u011c\20\0\1\u0232\33\0\1\u0177\2\0\1\u0233\2\0"+
    "\1\u0234\1\u0182\13\0\1\u0143\17\0\1\u0235\1\u0236\2\0"+
    "\1\305\1\0\1\u0237\2\0\1\341\2\0\1\u0238\1\u013c"+
    "\17\0\1\306\4\0\1\u0239\2\0\1\331\27\0\1\u023a"+
    "\1\0\1\u023b\2\0\1\u023c\35\0\1\u023d\1\u023e\11\0"+
    "\1\u023f\23\0\1\u0240\1\u0241\1\u0242\13\0\1\u0243\23\0"+
    "\1\u0244\32\0\1\270\2\0\1\u0104\7\0\1\176\40\0"+
    "\1\u0245\4\0\1\u0246\17\0\1\u0247\50\0\1\u0248\30\0"+
    "\1\u0249\2\0\1\u024a\55\0\1\u024b\21\0\1\u024c\32\0"+
    "\1\u024d\41\0\1\u024c\37\0\1\u024e\3\0\1\u024e\7\0"+
    "\1\u024e\23\0\1\u024f\42\0\1\u0250\1\u0251\36\0\1\u0252"+
    "\35\0\1\270\35\0\1\270\36\0\1\331\6\0\1\u0253"+
    "\53\0\1\331\21\0\1\303\15\0\1\u0254\25\0\1\u0122"+
    "\1\0\1\176\24\0\1\305\45\0\1\u0255\42\0\1\u0256"+
    "\35\0\1\u0257\2\0\1\u0136\3\0\1\322\31\0\1\270"+
    "\32\0\1\u0258\46\0\1\270\34\0\1\270\37\0\1\u0259"+
    "\5\0\1\u0143\41\0\1\u0238\23\0\1\u025a\51\0\1\176"+
    "\35\0\1\u025b\27\0\1\u025c\66\0\1\u025d\7\0\1\u025e"+
    "\52\0\1\u025f\43\0\1\u012e\25\0\1\u0260\1\0\1\341"+
    "\26\0\1\u024e\54\0\1\u0143\26\0\1\u0261\51\0\1\u0262"+
    "\21\0\1\u0234\42\0\1\u0263\37\0\1\u0264\1\0\1\u0265"+
    "\37\0\1\u0232\35\0\1\346\47\0\1\u0266\5\0\1\u0267"+
    "\22\0\1\u0268\33\0\1\u0269\14\0\1\u026a\22\0\1\u026b"+
    "\2\0\1\u026c\1\u026d\1\u0152\32\0\1\u026e\5\0\1\u026f"+
    "\42\0\1\u0270\40\0\1\176\27\0\1\u0271\43\0\1\u0182"+
    "\33\0\1\u0272\4\0\1\u0273\12\0\1\u0274\15\0\1\u0275"+
    "\1\0\1\u0276\1\u0277\34\0\1\u0278\4\0\1\u0279\32\0"+
    "\1\u0229\37\0\1\u027a\6\0\1\u012a\33\0\1\u027b\3\0"+
    "\1\u027c\7\0\1\u027d\1\0\1\u027e\25\0\1\u027f\32\0"+
    "\1\u0276\46\0\1\u0255\12\0\1\376\35\0\1\341\1\0"+
    "\1\376\24\0\1\u0255\5\0\1\341\3\0\1\u0254\25\0"+
    "\1\u0255\31\0\1\u0280\34\0\1\331\46\0\1\u0281\41\0"+
    "\1\u0282\40\0\1\305\46\0\1\176\24\0\1\u0283\42\0"+
    "\1\341\60\0\1\u0284\7\0\1\u0285\43\0\1\270\42\0"+
    "\1\270\31\0\1\u0286\33\0\1\u0287\60\0\1\u0288\37\0"+
    "\1\u0118\35\0\1\u0289\21\0\1\u028a\4\0\1\u0230\32\0"+
    "\1\u028b\1\0\1\u028c\4\0\1\u028d\33\0\1\u028e\1\u028f"+
    "\10\0\1\270\22\0\1\u0290\1\0\1\u0185\42\0\1\u0291"+
    "\50\0\1\u0292\27\0\1\u0293\1\u0294\10\0\1\u0295\4\0"+
    "\1\u0296\31\0\1\u0297\23\0\1\u0232\1\u0298\1\u0299\40\0"+
    "\1\u0219\32\0\1\331\22\0\1\376\14\0\1\331\5\0"+
    "\1\331\50\0\1\u0143\17\0\1\302\46\0\1\u029a\45\0"+
    "\1\320\31\0\1\u029b\42\0\1\341\44\0\1\305\21\0"+
    "\1\305\36\0\1\331\6\0\1\331\47\0\1\311\20\0"+
    "\1\u018b\40\0\1\270\15\0\1\u029c\37\0\1\u013c\27\0"+
    "\1\u029d\40\0\1\305\31\0\1\u0249\36\0\1\331\1\0"+
    "\1\u029e\14\0\1\65\1\u013c\34\0\1\145\30\0\1\341"+
    "\30\0\1\u029f\1\0\1\u0229\2\0\1\u02a0\1\u02a1\33\0"+
    "\1\65\35\0\1\u0275\4\0\1\u02a2\1\0\1\u017a\30\0"+
    "\1\u02a3\2\0\1\u0232\1\0\1\u0299\1\u02a4\31\0\1\u0234"+
    "\7\0\1\u0152\45\0\1\u02a5\21\0\1\331\1\u02a6\36\0"+
    "\1\u0254\37\0\1\122\50\0\1\u0122\30\0\1\u02a7\52\0"+
    "\1\u02a8\41\0\1\331\35\0\1\341\22\0\1\u0232\1\0"+
    "\1\u02a9\35\0\1\u028b\45\0\1\u02aa\31\0\1\u02ab\16\0"+
    "\1\u02ac\40\0\1\u01ac\17\0\1\u02ad\50\0\1\u02ae\36\0"+
    "\1\u02af\26\0\1\u02b0\7\0\1\u02b1\50\0\1\u02b2\34\0"+
    "\1\u01ac\30\0\1\u0108\47\0\1\u02b3\26\0\1\u02b4\36\0"+
    "\1\u02b5\51\0\1\u02b6\21\0\1\u0234\1\0\1\u02b7\56\0"+
    "\1\u02b8\21\0\1\u021e\12\0\1\u02b9\5\0\1\u02ba\24\0"+
    "\1\u02bb\46\0\1\176\24\0\1\u02bc\36\0\1\u026d\37\0"+
    "\1\u02bd\35\0\1\u02be\35\0\1\u02bf\1\0\1\u0152\3\0"+
    "\1\u02c0\36\0\1\u02c1\32\0\1\u02c2\44\0\1\u02c3\40\0"+
    "\1\u02c4\33\0\1\u02a0\3\0\1\u02c5\47\0\1\u02c6\36\0"+
    "\1\u012b\22\0\1\u02c7\3\0\1\u0268\1\0\1\u02c8\44\0"+
    "\1\u02c9\42\0\1\u02ca\34\0\1\u02cb\31\0\1\u02cc\36\0"+
    "\1\u012a\56\0\1\u0137\25\0\1\u02cd\4\0\1\u0290\21\0"+
    "\1\176\41\0\1\u02ce\42\0\1\u02cf\50\0\1\u0272\24\0"+
    "\1\u02d0\14\0\1\u02d1\2\0\1\u02d2\1\0\1\u02d3\17\0"+
    "\1\u02d4\32\0\1\u02d5\4\0\1\u02d6\10\0\1\u02d7\24\0"+
    "\1\u02d8\34\0\1\u02d9\2\0\1\47\1\u02da\1\u02db\50\0"+
    "\1\u02dc\23\0\1\u02dd\35\0\1\u02de\41\0\1\u02df\40\0"+
    "\1\331\55\0\1\u02e0\21\0\1\u0230\42\0\1\u02e1\47\0"+
    "\1\u02e2\32\0\1\u02e3\12\0\1\u02e4\33\0\1\u012e\25\0"+
    "\1\u02e5\32\0\1\331\50\0\1\331\17\0\1\u02e6\12\0"+
    "\1\u02e7\53\0\1\u013c\24\0\1\u02e8\34\0\1\305\6\0"+
    "\1\341\34\0\1\176\32\0\1\u02e9\1\0\1\u02ea\3\0"+
    "\1\u02eb\1\u018b\6\0\1\u02ec\30\0\1\u0255\6\0\1\u02ed"+
    "\17\0\1\306\4\0\1\u02ee\50\0\1\322\1\0\1\u02ec"+
    "\26\0\1\u02ef\1\0\1\u02f0\35\0\1\u02f1\34\0\1\165"+
    "\27\0\1\u0222\12\0\1\u02f2\54\0\1\u02f3\17\0\1\u02f4"+
    "\42\0\1\u0230\22\0\1\u0284\5\0\1\u02f5\37\0\1\270"+
    "\1\0\1\u0102\12\0\1\u02f6\14\0\1\u02f7\5\0\1\u02f8"+
    "\57\0\1\u02f9\16\0\1\u0137\62\0\1\331\20\0\1\341"+
    "\54\0\1\341\40\0\1\u0120\1\0\1\331\23\0\1\270"+
    "\1\0\1\u02fa\6\0\1\u016c\20\0\1\341\5\0\1\u02fb"+
    "\31\0\1\u02fc\36\0\1\270\11\0\1\270\26\0\1\270"+
    "\14\0\1\u02fd\21\0\1\u0143\37\0\1\315\6\0\1\u0260"+
    "\37\0\1\u0260\41\0\1\u02fe\26\0\1\u02ff\47\0\1\u0143"+
    "\44\0\1\u0300\24\0\1\u0301\36\0\1\331\20\0\1\341"+
    "\15\0\1\u0282\40\0\1\270\1\0\1\u0302\1\320\2\0"+
    "\1\270\45\0\1\305\31\0\1\u0303\30\0\1\270\1\331"+
    "\56\0\1\47\23\0\1\270\13\0\1\47\17\0\1\u0304"+
    "\31\0\1\u02e6\32\0\1\u02af\13\0\1\u0305\37\0\1\u0306"+
    "\15\0\1\341\42\0\1\u0307\21\0\1\u0232\2\0\1\331"+
    "\37\0\1\341\7\0\1\u0308\20\0\1\u0309\41\0\1\u030a"+
    "\37\0\1\u0179\52\0\1\u030b\22\0\1\u01d7\6\0\1\u030c"+
    "\50\0\1\u030d\17\0\1\u012e\5\0\1\u01d7\14\0\1\331"+
    "\32\0\1\u030e\4\0\1\u0254\25\0\1\u012e\6\0\1\u030d"+
    "\51\0\1\u030f\5\0\1\u0310\40\0\1\u0311\53\0\1\343"+
    "\21\0\1\u01e4\1\270\57\0\1\u019a\23\0\1\u02dd\44\0"+
    "\1\331\1\0\1\341\25\0\1\331\5\0\1\u0312\10\0"+
    "\1\u0313\24\0\1\u0219\32\0\1\u0314\51\0\1\331\4\0"+
    "\1\331\1\0\1\u0315\25\0\1\u0137\30\0\1\u0198\21\0"+
    "\1\200\40\0\1\u0316\15\0\1\u0317\14\0\1\u0318\21\0"+
    "\1\u0319\43\0\1\305\4\0\1\u02dd\35\0\1\305\37\0"+
    "\1\u031a\3\0\1\u031b\25\0\1\331\1\0\1\341\43\0"+
    "\1\u012a\31\0\1\270\10\0\1\331\4\0\1\331\26\0"+
    "\1\u0177\34\0\1\u031c\5\0\1\u031d\26\0\1\u031e\42\0"+
    "\1\u0136\16\0\1\270\21\0\1\u031f\2\0\1\47\31\0"+
    "\1\u0232\60\0\1\u0320\40\0\1\270\17\0\1\176\37\0"+
    "\1\u02dc\70\0\1\u010c\7\0\1\u01d7\11\0\1\u012e\4\0"+
    "\1\u0321\20\0\1\u0322\33\0\1\u029e\21\0\1\u0323\27\0"+
    "\1\331\4\0\1\331\26\0\1\122\10\0\1\u0324\42\0"+
    "\1\u0264\42\0\1\343\12\0\1\u0325\44\0\1\u0326\40\0"+
    "\1\u0255\2\0\1\u011a\47\0\1\u012a\20\0\1\u0327\44\0"+
    "\1\u0328\2\0\1\u0136\36\0\1\u0263\26\0\1\u01d7\52\0"+
    "\1\331\32\0\1\u0329\40\0\1\u032a\37\0\1\u032b\51\0"+
    "\1\u02fc\24\0\1\u032c\15\0\1\u032d\26\0\1\u032e\33\0"+
    "\1\u032f\6\0\1\303\1\0\1\u0330\21\0\1\u0331\15\0"+
    "\1\u030d\37\0\1\u019a\2\0\1\u0332\44\0\1\u012a\10\0"+
    "\1\305\1\0\1\45\1\0\1\122\36\0\1\45\4\0"+
    "\1\270\46\0\1\320\26\0\1\65\37\0\1\u0333\10\0"+
    "\1\u0334\1\u0335\15\0\1\u0336\1\331\12\0\1\u0337\6\0"+
    "\1\u0338\20\0\1\u017f\1\u01b1\4\0\1\u0339\5\0\1\u013c"+
    "\37\0\1\u0238\1\47\17\0\1\270\14\0\1\341\24\0"+
    "\1\u033a\56\0\1\317\21\0\1\u033b\41\0\1\u033c\12\0"+
    "\1\u0136\30\0\1\u033d\41\0\1\u0231\1\0\1\u033e\2\0"+
    "\1\65\25\0\1\u0152\41\0\1\341\10\0\1\176\36\0"+
    "\1\u0230\37\0\1\u033f\1\0\1\u0277\2\0\1\343\17\0"+
    "\1\u0340\31\0\1\u0341\1\0\1\u0342\11\0\1\u0343\6\0"+
    "\1\u0344\36\0\1\u0345\20\0\1\u0346\46\0\1\303\46\0"+
    "\1\u026d\20\0\1\331\2\0\1\270\4\0\1\u012e\34\0"+
    "\1\u0347\1\u0348\2\0\1\270\34\0\1\270\10\0\1\341"+
    "\21\0\1\u0349\54\0\1\u034a\23\0\1\323\40\0\1\331"+
    "\2\0\1\u0257\34\0\1\u034b\50\0\1\u0230\23\0\1\216"+
    "\5\0\1\u0137\37\0\1\u034c\37\0\1\376\30\0\1\331"+
    "\1\270\1\0\1\303\1\u0232\4\0\1\331\1\341\26\0"+
    "\1\u034d\47\0\1\u02dd\32\0\1\u034e\2\0\1\u034f\1\0"+
    "\1\u0350\31\0\1\u0126\3\0\1\u0351\11\0\1\u0352\31\0"+
    "\1\u0353\4\0\1\u0354\26\0\1\u0355\33\0\1\u0356\36\0"+
    "\1\u012e\45\0\1\341\32\0\1\331\3\0\1\331\34\0"+
    "\1\341\36\0\1\341\3\0\1\u0357\50\0\1\u0358\20\0"+
    "\1\331\1\u0349\52\0\1\200\30\0\1\u012e\14\0\1\u024e"+
    "\14\0\1\u0359\10\0\1\u035a\6\0\1\u01ae\17\0\1\u035b"+
    "\52\0\1\u0230\14\0\1\u0136\10\0\1\341\1\0\1\u035c"+
    "\53\0\1\u035d\31\0\1\u02dd\5\0\1\u035e\23\0\1\341"+
    "\1\73\36\0\1\336\66\0\1\u035f\14\0\1\323\11\0"+
    "\1\u0360\20\0\1\u02f3\57\0\1\341\24\0\1\u0361\50\0"+
    "\1\u0318\51\0\1\u0362\5\0\1\u02a0\50\0\1\u0363\11\0"+
    "\1\u0230\14\0\1\u0364\50\0\1\u0365\34\0\1\u0366\42\0"+
    "\1\331\27\0\1\u02ba\51\0\1\376\37\0\1\376\2\0"+
    "\1\u0367\25\0\1\u0126\33\0\1\u0368\51\0\1\331\42\0"+
    "\1\u0137\24\0\1\u0369\42\0\1\u036a\54\0\1\u0356\22\0"+
    "\1\u036b\33\0\1\u036c\5\0\1\331\36\0\1\u036d\42\0"+
    "\1\u036e\26\0\1\u036f\54\0\1\270\41\0\1\315\37\0"+
    "\1\337\22\0\1\u0370\42\0\1\u0152\50\0\1\u0371\43\0"+
    "\1\u02fc\24\0\1\73\36\0\1\334\53\0\1\u0372\23\0"+
    "\1\u02c5\35\0\1\u0373\14\0\1\u012e\23\0\1\u0276\1\u02a1"+
    "\31\0\1\u01c9\37\0\1\u0331\36\0\1\u0374\72\0\1\u0375"+
    "\26\0\1\u0244\2\0\1\343\17\0\1\176\37\0\1\346"+
    "\35\0\1\u0376\37\0\1\u02a0\36\0\1\176\44\0\1\u0272"+
    "\34\0\1\u0377\43\0\1\176\6\0\1\u0234\42\0\1\u0318"+
    "\20\0\1\356\43\0\1\u0325\7\0\1\u0378\37\0\1\u0379"+
    "\26\0\1\u037a\34\0\1\u037b\43\0\1\122\36\0\1\122"+
    "\51\0\1\176\27\0\1\u037c\41\0\1\u02cd\30\0\1\u037d"+
    "\35\0\1\u037e\71\0\1\u037f\25\0\1\u0380\23\0\1\u0381"+
    "\4\0\1\u02dd\47\0\1\320\17\0\1\u0382\36\0\1\u0383"+
    "\55\0\1\u0276\21\0\1\u0211\50\0\1\u012e\32\0\1\u0384"+
    "\35\0\1\u0272\36\0\1\u0385\53\0\1\u0386\44\0\1\u0387"+
    "\21\0\1\u0388\35\0\1\u0389\35\0\1\u01c9\4\0\1\u02a0"+
    "\36\0\1\u012e\36\0\1\u01a1\34\0\1\u0104\55\0\1\u0356"+
    "\53\0\1\u038a\10\0\1\u038b\47\0\1\u038c\50\0\1\176"+
    "\15\0\1\u0104\41\0\1\303\41\0\1\u012e\33\0\1\u0234"+
    "\35\0\1\u017d\1\0\1\u0272\42\0\1\270\32\0\1\u038d"+
    "\56\0\1\u038e\31\0\1\u038f\31\0\1\u0390\41\0\1\u0391"+
    "\36\0\1\u0392\65\0\1\u0393\5\0\1\u0394\44\0\1\u0395"+
    "\7\0\1\u0396\24\0\1\u0397\57\0\1\u0232\35\0\1\u0398"+
    "\51\0\1\u0399\14\0\1\u039a\51\0\1\47\23\0\1\u039b"+
    "\41\0\1\u0230\30\0\1\u0230\40\0\1\u039c\41\0\1\u02a0"+
    "\1\u032e\33\0\1\341\10\0\1\341\32\0\1\176\2\0"+
    "\1\341\34\0\1\u0345\44\0\1\u0102\51\0\1\341\22\0"+
    "\1\u039d\51\0\1\u039e\27\0\1\u039f\40\0\1\u0283\37\0"+
    "\1\u03a0\37\0\1\u02dd\1\0\1\u03a1\45\0\1\u0120\24\0"+
    "\1\302\50\0\1\u03a2\25\0\1\u03a3\42\0\1\341\5\0"+
    "\1\u02c0\40\0\1\u0230\31\0\1\u03a4\37\0\1\u021e\33\0"+
    "\1\u03a5\37\0\1\u03a6\32\0\1\u03a7\45\0\1\u03a8\51\0"+
    "\1\u0213\20\0\1\176\1\0\1\u03a9\5\0\1\u012e\10\0"+
    "\1\u012e\21\0\1\u03aa\53\0\1\u03ab\24\0\1\u03ac\40\0"+
    "\1\u0234\36\0\1\u03ad\34\0\1\u0290\40\0\1\305\35\0"+
    "\1\341\42\0\1\u03ae\37\0\1\u0331\50\0\1\331\33\0"+
    "\1\u03af\25\0\1\u01e4\60\0\1\u03b0\17\0\1\u0199\47\0"+
    "\1\u018b\42\0\1\u031b\30\0\1\u03b1\37\0\1\u0365\37\0"+
    "\1\165\33\0\1\u03b2\73\0\1\u0222\3\0\1\u03b3\71\0"+
    "\1\u03b4\23\0\1\u03b5\4\0\1\u0254\46\0\1\u03b6\5\0"+
    "\1\u03b7\54\0\1\u03b8\27\0\1\u03b9\36\0\1\u03ba\35\0"+
    "\1\u03bb\42\0\1\u03bc\41\0\1\u03bd\35\0\1\u03be\34\0"+
    "\1\u039c\40\0\1\47\43\0\1\47\37\0\1\u03bf\34\0"+
    "\1\u03c0\35\0\1\u03c1\56\0\1\270\25\0\1\u0357\35\0"+
    "\1\u03c2\56\0\1\u03c3\16\0\1\u0145\34\0\1\u0104\7\0"+
    "\1\305\33\0\1\u03c4\45\0\1\u02ba\43\0\1\u0148\27\0"+
    "\1\u03c5\51\0\1\270\41\0\1\270\34\0\1\u03c6\24\0"+
    "\1\u03c7\33\0\1\u0108\41\0\1\u03c8\41\0\1\u03c9\33\0"+
    "\1\u03ca\42\0\1\u03cb\36\0\1\u0137\44\0\1\u0130\37\0"+
    "\1\u03cc\45\0\1\u03cd\40\0\1\u03ce\24\0\1\u018b\46\0"+
    "\1\u012a\25\0\1\u03cf\46\0\1\341\14\0\1\u0258\21\0"+
    "\1\u03d0\31\0\1\u017f\10\0\1\331\50\0\1\u03d1\21\0"+
    "\1\u0343\33\0\1\u017d\50\0\1\u02b7\33\0\1\302\43\0"+
    "\1\53\31\0\1\u03d2\40\0\1\47\41\0\1\u03d3\31\0"+
    "\1\122\15\0\1\u03c2\25\0\1\341\4\0\1\341\26\0"+
    "\1\u03d4\36\0\1\341\55\0\1\u03d5\22\0\1\u03d6\52\0"+
    "\1\341\25\0\1\270\7\0\1\341\30\0\1\u03d7\3\0"+
    "\1\u02a1\33\0\1\u03d8\2\0\1\u03d9\32\0\1\u03da\41\0"+
    "\1\u012e\3\0\1\u0229\34\0\1\u03bf\1\0\1\u0152\1\u03db"+
    "\40\0\1\u03dc\37\0\1\u02c9\31\0\1\u03dd\56\0\1\376"+
    "\36\0\1\47\1\0\1\47\24\0\1\u03de\31\0\1\u0290"+
    "\1\0\1\u03df\41\0\1\u0105\36\0\1\u03e0\2\0\1\u03e1"+
    "\47\0\1\u03e2\23\0\1\u0152\35\0\1\u03e3\4\0\1\u0152"+
    "\41\0\1\u0343\37\0\1\311\47\0\1\u03e4\40\0\1\u013c"+
    "\34\0\1\u03e5\22\0\1\u0118\37\0\1\331\6\0\1\u02a6"+
    "\30\0\1\u03e6\54\0\1\u03e7\22\0\1\u03e8\44\0\1\u03e9"+
    "\7\0\1\u03ea\37\0\1\u0353\22\0\1\u0353\45\0\1\u03eb"+
    "\46\0\1\u012a\31\0\1\u018b\60\0\1\u03ec\30\0\1\u01ae"+
    "\27\0\1\u03ed\26\0\1\200\1\0\1\u03ee\2\0\1\u03ef"+
    "\1\u03f0\40\0\1\u02e0\5\0\1\200\47\0\1\u03f1\14\0"+
    "\1\u03f2\37\0\1\u03f3\43\0\1\u03f4\50\0\1\341\20\0"+
    "\1\u03f5\40\0\1\u0230\45\0\1\u0223\50\0\1\u03f6\23\0"+
    "\1\305\4\0\1\331\37\0\1\u0121\41\0\1\270\30\0"+
    "\1\u03f7\36\0\1\u03f8\34\0\1\u01c0\43\0\1\u0143\53\0"+
    "\1\u01ae\23\0\1\u0103\42\0\1\u02f4\32\0\1\u01ee\37\0"+
    "\1\u03f9\37\0\1\u03fa\15\0\1\u03fb\26\0\1\u02ba\10\0"+
    "\1\176\24\0\1\u0245\36\0\1\u032e\53\0\1\u03fc\43\0"+
    "\1\343\20\0\1\u03fd\37\0\1\u0230\40\0\1\u03fe\52\0"+
    "\1\u03ff\31\0\1\u0400\33\0\1\u03c2\30\0\1\u0203\37\0"+
    "\1\u0401\45\0\1\u0402\44\0\1\u0403\25\0\1\u0404\40\0"+
    "\1\u0405\37\0\1\u0406\42\0\1\u0407\43\0\1\176\37\0"+
    "\1\u0408\36\0\1\73\26\0\1\343\44\0\1\u0409\51\0"+
    "\1\176\23\0\1\u040a\55\0\1\u040b\24\0\1\u040c\52\0"+
    "\1\u0143\2\0\1\u040d\41\0\1\u040e\27\0\1\u040f\44\0"+
    "\1\u0410\15\0\1\u0411\40\0\1\u0412\40\0\1\u0413\44\0"+
    "\1\u0414\50\0\1\u0415\35\0\1\u0416\26\0\1\u0104\33\0"+
    "\1\u02e5\45\0\1\u02af\50\0\1\u018b\20\0\1\u0282\60\0"+
    "\1\u012e\32\0\1\u02af\26\0\1\u0417\53\0\1\u02b9\30\0"+
    "\1\u0418\33\0\1\u0419\35\0\1\u041a\40\0\1\u041b\33\0"+
    "\1\u041c\40\0\1\u041d\36\0\1\341\6\0\1\u041e\47\0"+
    "\1\u038f\26\0\1\u0182\15\0\1\176\36\0\1\u041f\33\0"+
    "\1\u0420\23\0\1\u0421\40\0\1\u0422\60\0\1\u0423\14\0"+
    "\1\u0424\54\0\1\u0223\22\0\1\u0425\41\0\1\u0426\33\0"+
    "\1\u0427\55\0\1\u0428\32\0\1\u0429\37\0\1\u042a\43\0"+
    "\1\u042b\27\0\1\u042c\40\0\1\u02a1\33\0\1\u02c9\46\0"+
    "\1\47\32\0\1\315\33\0\1\u042d\57\0\1\u042e\21\0"+
    "\1\u042f\42\0\1\u0430\43\0\1\u0431\25\0\1\u0432\46\0"+
    "\1\u0433\63\0\1\u0434\15\0\1\323\44\0\1\u02f6\30\0"+
    "\1\u0435\52\0\1\u03a2\25\0\1\u0436\37\0\1\u0437\30\0"+
    "\1\u0438\41\0\1\u0439\41\0\1\305\33\0\1\u030d\50\0"+
    "\1\u038e\27\0\1\343\16\0\1\u012e\30\0\1\u043a\34\0"+
    "\1\u0199\35\0\1\176\4\0\1\315\47\0\1\u043b\40\0"+
    "\1\u043c\16\0\1\u043d\36\0\1\u036a\36\0\1\u043e\61\0"+
    "\1\u043f\22\0\1\u0440\37\0\1\u0441\37\0\1\134\33\0"+
    "\1\u0442\63\0\1\u0443\31\0\1\u02b9\23\0\1\u03f5\54\0"+
    "\1\47\20\0\1\331\1\0\1\u0369\36\0\1\u0444\62\0"+
    "\1\u0136\22\0\1\u0445\54\0\1\376\17\0\1\u0446\44\0"+
    "\1\u0447\53\0\1\u0232\11\0\1\u0448\51\0\1\u0230\26\0"+
    "\1\u0449\37\0\1\u044a\57\0\1\u044b\22\0\1\u021e\61\0"+
    "\1\u044c\17\0\1\u044d\41\0\1\u0258\41\0\1\u044e\37\0"+
    "\1\305\34\0\1\u044f\36\0\1\u0450\64\0\1\u0451\6\0"+
    "\1\u0452\44\0\1\u0318\33\0\1\u0453\55\0\1\u0454\26\0"+
    "\1\u0455\41\0\1\u0456\30\0\1\u0457\65\0\1\176\7\0"+
    "\1\u0193\40\0\1\150\40\0\1\u0390\41\0\1\u0458\41\0"+
    "\1\u0459\63\0\1\u045a\5\0\1\u045b\46\0\1\u02ba\45\0"+
    "\1\u045c\24\0\1\u045d\41\0\1\u045e\33\0\1\u045f\56\0"+
    "\1\u0460\31\0\1\150\31\0\1\u0461\66\0\1\u0462\11\0"+
    "\1\u0421\35\0\1\u0463\42\0\1\u0331\40\0\1\u0464\47\0"+
    "\1\u0465\27\0\1\u0185\36\0\1\u0466\37\0\1\u0467\52\0"+
    "\1\u0409\26\0\1\u0468\10\0\1\u0469\20\0\1\u017e\42\0"+
    "\1\u0193\53\0\1\305\36\0\1\u02af\23\0\1\u046a\34\0"+
    "\1\u046b\50\0\1\u046c\32\0\1\u044d\42\0\1\u046d\34\0"+
    "\1\u046e\42\0\1\u046f\43\0\1\u043d\27\0\1\311\37\0"+
    "\1\u0143\36\0\1\u0470\44\0\1\u0471\50\0\1\u0472\34\0"+
    "\1\u0473\42\0\1\u0428\30\0\1\u029e\34\0\1\u0474\46\0"+
    "\1\u0475\42\0\1\u0476\17\0\1\u0474\42\0\1\u0477\34\0"+
    "\1\341\6\0\1\270\37\0\1\315\36\0\1\u0478\35\0"+
    "\1\u0479\33\0\1\u047a\42\0\1\u012a\43\0\1\u02a6\35\0"+
    "\1\u047b\40\0\1\u03fc\34\0\1\376\66\0\1\u047c\12\0"+
    "\1\u0161\40\0\1\u03c2\47\0\1\u047d\25\0\1\u047e\40\0"+
    "\1\u047f\41\0\1\u0480\62\0\1\u0481\5\0\1\u0410\46\0"+
    "\1\u0410\47\0\1\u0482\25\0\1\u0483\35\0\1\u0484\55\0"+
    "\1\u0485\16\0\1\u0486\40\0\1\u034e\56\0\1\u0487\51\0"+
    "\1\u010a\37\0\1\u0488\13\0\1\u0213\42\0\1\u0489\32\0"+
    "\1\u048a\36\0\1\u048b\57\0\1\u018b\20\0\1\u048c\65\0"+
    "\1\u048d\15\0\1\u0161\32\0\1\u048e\34\0\1\u048f\44\0"+
    "\1\u0490\1\u0491\51\0\1\u0282\26\0\1\u0492\30\0\1\u0493"+
    "\50\0\1\320\44\0\1\u0494\31\0\1\u0476\51\0\1\u0260"+
    "\47\0\1\u0495\11\0\1\u0496\46\0\1\u0230\33\0\1\u0497"+
    "\50\0\1\u0498\17\0\1\u0409\64\0\1\u0230\14\0\1\u0499"+
    "\60\0\1\u049a\31\0\1\u0358\33\0\1\u049b\53\0\1\u0410"+
    "\17\0\1\u049c\36\0\1\u034e\33\0\1\73\45\0\1\u049d"+
    "\50\0\1\u0105\21\0\1\u039f\44\0\1\u03d4\31\0\1\u0468"+
    "\46\0\1\u049e\30\0\1\u049f\43\0\1\u0161\40\0\1\u017f"+
    "\43\0\1\u017f\44\0\1\u03df\30\0\1\u04a0\34\0\1\u04a1"+
    "\40\0\1\u0427\47\0\1\u04a2\22\0\1\u0470\44\0\1\u04a3"+
    "\40\0\1\u04a4\40\0\1\u0282\41\0\1\u04a5\46\0\1\u0496"+
    "\24\0\1\u04a6\52\0\1\u04a7\21\0\1\u04a8\56\0\1\u0260"+
    "\24\0\1\u04a9\42\0\1\u0105\36\0\1\u0468\36\0\1\u04aa"+
    "\62\0\1\u04ab\25\0\1\u044d\40\0\1\305\27\0\1\u044c"+
    "\32\0\1\u04ac\53\0\1\u04ad\25\0\1\u04ae\37\0\1\u04af"+
    "\35\0\1\u04b0\43\0\1\u0409\37\0\1\u044d\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36416];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\31\1\5\0\1\1\16\0\1\1\4\0"+
    "\2\1\1\0\1\1\1\0\1\11\13\0\1\1\2\0"+
    "\1\1\4\0\1\1\5\0\3\1\1\0\1\1\10\0"+
    "\1\1\5\0\1\11\2\0\1\1\11\0\1\11\1\0"+
    "\1\1\7\0\1\1\4\0\1\1\5\0\1\1\31\0"+
    "\1\1\23\0\1\11\5\0\1\1\5\0\1\1\1\11"+
    "\15\0\1\11\4\0\1\1\1\11\3\0\2\1\2\0"+
    "\1\11\66\0\1\11\13\0\1\1\26\0\1\1\7\0"+
    "\1\11\20\0\1\1\3\0\1\1\3\0\1\11\4\0"+
    "\1\11\2\0\1\1\12\0\1\1\26\0\1\1\4\0"+
    "\1\11\1\0\1\1\5\0\1\11\1\1\21\0\1\1"+
    "\3\0\1\1\1\0\1\11\1\1\1\0\1\1\3\0"+
    "\1\1\2\0\1\1\15\0\1\1\6\0\2\1\31\0"+
    "\1\1\3\0\1\1\35\0\1\1\7\0\1\1\23\0"+
    "\1\1\3\0\1\1\1\0\1\1\2\0\1\1\2\0"+
    "\1\11\15\0\1\1\3\0\1\1\5\0\1\1\13\0"+
    "\1\1\55\0\1\11\30\0\1\1\1\0\1\1\21\0"+
    "\1\11\5\0\1\1\65\0\1\1\1\0\1\1\1\0"+
    "\2\1\3\0\1\1\5\0\1\1\13\0\1\1\1\0"+
    "\1\1\11\0\1\1\3\0\2\1\1\0\1\1\5\0"+
    "\1\1\1\0\1\1\11\0\1\1\12\0\1\1\21\0"+
    "\1\1\7\0\1\1\2\0\1\11\1\0\1\1\26\0"+
    "\1\1\45\0\1\1\33\0\1\1\3\0\1\1\1\11"+
    "\6\0\1\1\11\0\1\1\5\0\1\1\6\0\1\1"+
    "\4\0\1\1\5\0\1\1\10\0\1\1\33\0\1\1"+
    "\7\0\1\11\47\0\1\1\23\0\1\1\3\0\1\1"+
    "\2\0\2\11\4\0\1\1\10\0\1\1\5\0\1\1"+
    "\6\0\1\11\1\1\6\0\2\11\4\0\1\11\37\0"+
    "\1\11\32\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //----> Codigo de usuario en sintaxis java
    //----> Codigo de usuario en sintaxis java
    public static LinkedList<TError> TablaEL = new LinkedList<TError>(); 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Distributiva"); return new Symbol(sym.CC_Distributivas, yycolumn, yyline, yytext());
          }
        case 38: break;
        case 10: 
          { System.out.println("Reconocio "+yytext()+" Verbo Primera Persona"); return new Symbol(sym.VER_AM, yycolumn, yyline, yytext());
          }
        case 39: break;
        case 2: 
          { /* Espacios en blanco, se ignoran */
          }
        case 40: break;
        case 29: 
          { System.out.println("Reconocio "+yytext()+" Pronombre Demostrativo"); return new Symbol(sym.Pron_Demostrativo, yycolumn, yyline, yytext());
          }
        case 41: break;
        case 24: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Tiempo"); return new Symbol(sym.ADB_Tiempo, yycolumn, yyline, yytext());
          }
        case 42: break;
        case 26: 
          { System.out.println("Reconocio "+yytext()+" Interjeccion"); return new Symbol(sym.Interjeccion, yycolumn, yyline, yytext());
          }
        case 43: break;
        case 33: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Copulativa"); return new Symbol(sym.CC_Adversativas, yycolumn, yyline, yytext());
          }
        case 44: break;
        case 14: 
          { System.out.println("Reconocio "+yytext()+" Pronombre Plural"); return new Symbol(sym.PRON_PER_PLUR, yycolumn, yyline, yytext());
          }
        case 45: break;
        case 8: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Afirmacion"); return new Symbol(sym.ADB_Afirmacion, yycolumn, yyline, yytext());
          }
        case 46: break;
        case 6: 
          { System.out.println("Reconocio "+yytext()+" Premoposicion"); return new Symbol(sym.Preposicion, yycolumn, yyline, yytext());
          }
        case 47: break;
        case 12: 
          { System.out.println("Reconocio "+yytext()+" Adjetivo Posesivo"); return new Symbol(sym.Ad_Posesivo, yycolumn, yyline, yytext());
          }
        case 48: break;
        case 3: 
          { System.out.println("Reconocio "+yytext()+" Pronombre Singular"); return new Symbol(sym.PRON_PER_SING, yycolumn, yyline, yytext());
          }
        case 49: break;
        case 27: 
          { System.out.println("Reconocio "+yytext()+" Pronombre Interrogativo"); return new Symbol(sym.Pron_Interrogativo, yycolumn, yyline, yytext());
          }
        case 50: break;
        case 11: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Negacion"); return new Symbol(sym.ADB_Negacion, yycolumn, yyline, yytext());
          }
        case 51: break;
        case 28: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Lugar"); return new Symbol(sym.ADB_Lugar, yycolumn, yyline, yytext());
          }
        case 52: break;
        case 31: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Casuales"); return new Symbol(sym.CS_Casuales, yycolumn, yyline, yytext());
          }
        case 53: break;
        case 1: 
          { System.out.println("Error Lexico"+yytext()+" Linea "+yyline+" Columna "+yycolumn);
                          TError datos = new TError(yytext(),yyline,yycolumn,"Error Lexico","Simbolo no existe en el lenguaje");
                          TablaEL.add(datos);
          }
        case 54: break;
        case 34: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Consecutiva"); return new Symbol(sym.CS_Consecutivas, yycolumn, yyline, yytext());
          }
        case 55: break;
        case 35: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Final"); return new Symbol(sym.CS_Finales, yycolumn, yyline, yytext());
          }
        case 56: break;
        case 19: 
          { System.out.println("Reconocio "+yytext()+" Contraccion"); return new Symbol(sym.Contracciones, yycolumn, yyline, yytext());
          }
        case 57: break;
        case 23: 
          { System.out.println("Reconocio "+yytext()+" Articulo Definido"); return new Symbol(sym.Ar_Definido, yycolumn, yyline, yytext());
          }
        case 58: break;
        case 20: 
          { System.out.println("Reconocio "+yytext()+" Adjetivo Indefinido"); return new Symbol(sym.Ad_Indefinido, yycolumn, yyline, yytext());
          }
        case 59: break;
        case 15: 
          { System.out.println("Reconocio "+yytext()+" Sustantivo"); return new Symbol(sym.Sustantivo, yycolumn, yyline, yytext());
          }
        case 60: break;
        case 4: 
          { System.out.println("Reconocio "+yytext()+" Articulo Indefinido"); return new Symbol(sym.Ar_Indefinido, yycolumn, yyline, yytext());
          }
        case 61: break;
        case 37: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Condicional"); return new Symbol(sym.CS_Condicionales, yycolumn, yyline, yytext());
          }
        case 62: break;
        case 5: 
          { System.out.println("Reconocio "+yytext()+" Verbo Irregular"); return new Symbol(sym.VB_Irregulares, yycolumn, yyline, yytext());
          }
        case 63: break;
        case 17: 
          { System.out.println("Reconocio "+yytext()+" Adjetivo Calificativo"); return new Symbol(sym.Ad_Calificativo, yycolumn, yyline, yytext());
          }
        case 64: break;
        case 30: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Explicativa"); return new Symbol(sym.CC_Explicativas, yycolumn, yyline, yytext());
          }
        case 65: break;
        case 22: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Copulativa"); return new Symbol(sym.CC_Copulativas, yycolumn, yyline, yytext());
          }
        case 66: break;
        case 7: 
          { System.out.println("Reconocio "+yytext()+" Verbo Singular"); return new Symbol(sym.VER_SING, yycolumn, yyline, yytext());
          }
        case 67: break;
        case 21: 
          { System.out.println("Reconocio "+yytext()+" Verbo Plural"); return new Symbol(sym.VER_PLUR, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 32: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Concesivas"); return new Symbol(sym.CS_Concesivas, yycolumn, yyline, yytext());
          }
        case 69: break;
        case 13: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Cantidad"); return new Symbol(sym.ADB_Cantidad, yycolumn, yyline, yytext());
          }
        case 70: break;
        case 36: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Duda"); return new Symbol(sym.ADB_Duda, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 18: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Modo"); return new Symbol(sym.ADB_Modo, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 25: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Disyuntiva"); return new Symbol(sym.CC_Disyuntivas, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 16: 
          { System.out.println("Reconocio "+yytext()+" Verbo Regular"); return new Symbol(sym.VB_Regular, yycolumn, yyline, yytext());
          }
        case 74: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
